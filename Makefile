# autogenerated script from
.PHONY: help fixtures

-include custom.Makefile

# User Id
UNAME = $(shell uname)

ifeq ($(UNAME), Linux)
    UID = $(shell id -u)
else
    UID = 1000
endif

ifneq ("$(wildcard .env)","")
	include .env
	export
endif

INTERACTIVE:=$(shell [ -t 0 ] && echo 1)

ifdef INTERACTIVE
# is a terminal
	TTY_DOCKER=-it
	TTY_COMPOSE=
else
# bash job
	TTY_DOCKER=
	TTY_COMPOSE=-T
endif

COMPOSE=docker-compose

ifneq ("$(wildcard /.dockerenv)","")
	echo "Should not be used inside a container"
	exit 1
else
	COMPOSE_PHP_CMD=$(COMPOSE) exec $(TTY_COMPOSE) -u www-data php
endif

## Display this help text
help:
	$(info ---------------------------------------------------------------------)
	$(info -                        Available targets                          -)
	$(info ---------------------------------------------------------------------)
	@awk '/^[a-zA-Z\-\_0-9]+:/ {                                   \
	nb = sub( /^## /, "", helpMsg );                             \
	if(nb == 0) {                                                \
		helpMsg = $$0;                                             \
		nb = sub( /^[^:]*:.* ## /, "", helpMsg );                  \
	}                                                            \
	if (nb)                                                      \
		printf "\033[1;31m%-" width "s\033[0m %s\n", $$1, helpMsg; \
	}                                                              \
	{ helpMsg = $$0 }'                                             \
	$(MAKEFILE_LIST) | column -ts:

#==============================================================================
# Auto conf
#==============================================================================

.env:
	cp .env.dist .env

.php.env:
	cp .php.env.dist .php.env

docker-compose.yml:
	cp docker-compose.yml.dist docker-compose.yml

autoconf: .env .php.env docker-compose.yml

#==============================================================================
# Standard docker dev commands
#==============================================================================

## Pull images used in docker-compose config
pull: autoconf
	docker-compose pull --no-parallel

## Start all the containers
up: autoconf
	docker-compose up -d

## Alias -> up
start: up

## Stop all the containers
stop:
	docker-compose stop

## Stop, then... start
restart: stop start

## Down all the containers
down:
	docker-compose down --remove-orphans --volumes

## Logs for all containers of the project
logs:
	docker-compose logs -tf --tail=1000

## Status of containers
ps:
	docker-compose ps

#==============================================================================
# Interactive shells
#==============================================================================

## Enter interactive shell into php container
php:
	docker-compose exec --user www-data php bash

## Enter interactive shell into nginx container
nginx:
	docker-compose exec nginx sh

#==============================================================================
# Shortcuts
#==============================================================================

## Symfony cache clear
cc:
	$(COMPOSE_PHP_CMD) ./bin/console cache:clear

## CS Fixer
fix:
	$(COMPOSE_PHP_CMD) vendor/bin/php-cs-fixer fix src

# Just wait php ready
wait:
	@$(COMPOSE) run php echo "Container : php is now ready"

## Upgrade sources + rebuild container + launch migrations
upgrade: pull up wait internal_update

## composer + upgrade (migrations,...)
internal_update:
	$(COMPOSE_PHP_CMD) composer install
	$(COMPOSE_PHP_CMD) ./bin/console doctrine:migrations:migrate -n

## Load fixtures (without migrations)
fixtures:
	$(COMPOSE_PHP_CMD) ./scripts/dev/fixtures.sh

## Load fixtures (with migrations)
fixtures-with-migrations:
	$(COMPOSE_PHP_CMD) ./scripts/dev/fixtures.sh --with-migrations

## Prepare database to generate migration
prepare-migration:
	$(COMPOSE_PHP_CMD) ./scripts/dev/fixtures.sh --with-migrations --without-fixtures
